package lab11.tasks.task7;
import java.util.ArrayList;
/*
7. В кругу стоят N человек, пронумерованных от 1 до N.
При ведении счета по кругу вычеркивается каждый второй человек,
 пока не останется один. Составить две программы, моделирующие процесс.
  Одна из программ должна использовать класс ArrayList, а вторая — LinkedList.
  Какая из двух программ работает быстрее? Почему?
 */
public class ArrayListExample {

    public static void main(String[] args) {
        int n = 1000000; // число элементов в списке
        ArrayList<Integer> list = new ArrayList<Integer>(n);

        for (int i = 1; i <= n; i++) {
            list.add(i);
        }

        int i = 0;
        while (list.size() > 1) {
            i = (i + 1) % list.size();
            list.remove(i);
        }

        System.out.println("Остался человек под номером " + list.get(0));
    }

}
/*
Оба этих варианта решения имеют одинаковую асимптотическую сложность O(n^2),
так как при каждой итерации цикла происходит удаление элемента из списка, что имеет линейную сложность.
Однако, поскольку LinkedList представляет собой связанный список, операции удаления элементов будут выполняться быстрее,
 чем в ArrayList, что может привести к незначительному ускорению программы.

 Но как я заметил увеличив N до миллиона то быстрее ArrayList.
 И думаю что это связано с тем что ArrayList имеет прямые ссылки на каждый элемент в списке,
 поэтому он может получить n-й элемент за постоянное время.
 LinkedList должен пройти по списку с самого начала, чтобы добраться до n-го элемента.
 И возможно несмотря на пересборку массива в ArrayList при удалении,
  LinkedList медленнее из-за прохода по всему списку в каждой итерации.
 */