package lab5;
//5. Напишите программу с классом, у которого есть закрытое целочисленное поле.
// Значение полю присваивается с помощью открытого метода.
// Методу аргументом может передаваться целое число, а также метод может вызываться без аргументов.
// Если методы вызывается без аргументов, то поле получает нулевое значение.
// Если метод вызывается с целочисленным аргументом, то это значение присваивается полю.
// Однако если переданное аргументом методу значение превышает 100,
// то значением полю присваивается число 100. Предусмотрите в классе конструктор,
// который работает по тому же принципу что и метод для присваивания значения полю.
// Также в классе должен быть метод, позволяющий проверить значение поля.
class MyTask5 {
    private int m;
    public void set(int n) {
        if (n >= 100){
            m = 100;
        }else {
            m = n;
        }
    }
    public void set() {
        m = 0;
    }
    public int getM() {
        return m;
    }

    MyTask5 (int a){
        this.set(a);
        System.out.println();
    }
}
public class task5 {
    public static void main(String[] args) {

        MyTask5 obj = new MyTask5(71);
        System.out.println("значение целочисленного поля присвоенное через конструктор: " + obj.getM() );
        obj.set();
        System.out.println("значение целочисленного поля присвоенное методом без аргументов: " + obj.getM() );
        obj.set(99);
        System.out.println("значение целочисленного поля присвоенное методом c аргументом < 100: " + obj.getM() );
        obj.set(214);
        System.out.println("значение целочисленного поля присвоенное методом c аргументом > 100: " + obj.getM() );
    }
}
